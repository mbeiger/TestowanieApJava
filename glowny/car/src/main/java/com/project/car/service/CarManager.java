package com.project.car.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.project.car.domain.Car;

public class CarManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableCar = "CREATE TABLE Car(id bigint GENERATED BY DEFAULT AS IDENTITY, model varchar(30), rok integer)";

	private PreparedStatement addCarStmt;
	private PreparedStatement deleteAllCarsStmt;
	private PreparedStatement deleteCarStmt;
	private PreparedStatement getAllCarsStmt;
	private PreparedStatement getCarByIdStmt;
	private PreparedStatement getCarByModelStmt;
	private PreparedStatement updateCarStmt;

	private Statement statement;

	public CarManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableCar);

			addCarStmt = connection
					.prepareStatement("INSERT INTO Car (model, rok) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS); 
			deleteAllCarsStmt = connection
					.prepareStatement("DELETE FROM Car");
			deleteCarStmt = connection
					.prepareStatement("DELETE FROM Car WHERE model=? AND rok=?");
			getAllCarsStmt = connection
					.prepareStatement("SELECT id, model, rok FROM Car");
			getCarByModelStmt = connection
					.prepareStatement("SELECT id, model, rok FROM Car WHERE model=?");	
			getCarByIdStmt = connection
					.prepareStatement("SELECT id, model, rok FROM Car WHERE id=?");			
			updateCarStmt = connection
					.prepareStatement("UPDATE Car SET model=?, rok=? WHERE id=?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearCars() {
		try {
			deleteAllCarsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public int deleteCar(Car car) {
		int count = 0;
		try {
			deleteCarStmt.setString(1, car.getModel());
			deleteCarStmt.setInt(2, car.getRok());

			count = deleteCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addCar(Car car) {
		int count = 0;
		try {
			addCarStmt.setString(1, car.getModel());
			addCarStmt.setInt(2, car.getRok());

			count = addCarStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addCarGetID(Car car) {
		int key = 0;
		try {
			addCarStmt.setString(1, car.getModel());
			addCarStmt.setInt(2, car.getRok());

			addCarStmt.executeUpdate();
			ResultSet rs = addCarStmt.getGeneratedKeys();
			if (rs.next()){
				key = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return key;
	}
	public int updateCar(int id, Car car) {
		int count = 0;
		try {
			updateCarStmt.setString(1, car.getModel());
			updateCarStmt.setInt(2, car.getRok());
			updateCarStmt.setInt(3, id);
			
			count = updateCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public List<Car> getAllCars() {
		List<Car> cars = new ArrayList<Car>();

		try {
			ResultSet rs = getAllCarsStmt.executeQuery();

			while (rs.next()) {
				Car c = new Car();
				c.setId(rs.getInt("id"));
				c.setModel(rs.getString("model"));
				c.setRok(rs.getInt("rok"));
				cars.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cars;
	}
	public List<Car> getCarsByModel(String model) {
		List<Car> cars = new ArrayList<Car>();

		try {
			getCarByModelStmt.setString(1, model);
			ResultSet rs = getCarByModelStmt.executeQuery();

			while (rs.next()) {
				Car c = new Car();
				c.setId(rs.getInt("id"));
				c.setModel(rs.getString("model"));
				c.setRok(rs.getInt("rok"));
				cars.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cars;
	}
	 public Car getCar(Long id) {
	        Car c = new Car();
	        try {
	            getCarByIdStmt.setLong(1, id);
	            ResultSet rs = getCarByIdStmt.executeQuery();
	
	            while (rs.next()) {
	                c.setId(rs.getInt("id"));
	                c.setModel(rs.getString("model"));
	                c.setRok(rs.getInt("rok"));
	                break;
	            }
	
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	
	        return c;
	   }
}
